Problem Statement: Rearrange the given sorted array
Given a sorted array of positive integers, rearrange the array alternately i.e first element should be maximum value, second minimum value, third second max, fourth second min and so on
This exercise contains a class named RearrangeArrayElements with the following methods:
+inputAcceptor() : void
    -Should accept inputs from the console 
    -Should call inputArraySizeValidator method with given array size
    -Should call inputArrayValidator method with given input array
    -Should call displayResult method with null as argument based on the validation result
    -Should call computeRearrangedArray if inputs are valid 

+inputArraySizeValidator(int) : boolean
    -Should accept input as int and validate it 
    -Should return true if given input is valid otherwise false

+inputArrayValidator(int[]) : boolean
    -Should accept input as int array and check given array is sorted or not
    -Should return true if given input is valid otherwise false

+computeRearrangedArray(int[]) : int[]
    -Should get int array as input and return rearranged array as output 
    -Should rearrange the given input array

+displayResult(int[]) : void
    -Should accept int array as input and print it
    -Should print "Give proper input" if given input array is null

Example
Sample Input:
7
1 2 3 4 5 6 7

Expected Output: 
7 1 6 2 5 3 4

Sample Input:
0 
    
Expected Output:
Give proper input

Sample Input:
1
4 
    
Expected Output:
4

Instructions

Avoid printing unnecessary values other than expected output as given in sample
Take care of whitespace/trailing whitespace
Do not change the provided class/method names unless instructed
Follow best practices while coding













Problem Statement: Find the length of the longest sequence of zeros in binary representation of a positive integer.
Given a positive number, find the length of the longest sequence of zeros in binary representation of a positive integer using conditional statements and loops
This exercise contains a class named LongestSequence with the following methods:
+inputAcceptor() : void
    -Should accept input from the console
    -Should call inputValidator method with given input

+inputValidator(int) : void
    -Should accept input as int and validates the input
    -Should print error message "Give proper input not negative number" if Number(N) is negative
    -Should print error message "Give proper input not zero" if Number(N) is zero
    -Should call method findLongestSequence method with input
    -Should print result as int like 4 

+findLongestSequence(int) : int
    -Should get number as input and return length of the longest sequence of zeros in binary representation of number as int
    -Should find length of the longest sequence of zeros in binary representation
    -Should return length of the longest sequence of zeros in binary representation if found otherwise return -1

+outputPrinter(Object) : void
    -Should accept any type as input and print it

Example
Sample Input:
7

Expected Output:   
0

Sample Input:
5

Expected Output:
1

Sample Input:
-20

Expected Output:
Give proper input not negative number

Sample Input:
0

Expected Output:
Give proper input not zero

Sample Input:
8

Expected Output:
3

Instructions

Avoid printing unnecessary values other than expected output as given in sample
Take care of whitespace/trailing whitespace
Do not change the provided class/method names unless instructed
Follow best practices while coding











Exercise - StringBuilder
Problem Statement: Find the longest substring that appears at both ends of a given StringBuilder
Given a string, find the longest substring that appears at both ends of a given StringBuilder

This exercise contains a class named LongestSubString with the following method:

+findLongestSubString(StringBuilder) : StringBuilder 
    -Should accept StringBuilder as input and return StringBuilder
    -Should find the longest substring that appears at both ends of a given StringBuilder
    -Should return "Longest substring is not present in the given StringBuilder" if longest substring does not exist
    -Should return "Give proper input" if input is empty StringBuilder
Example
Sample Input:
playerplay

Expected Output:   
play --------------------------------------------------------
Sample Input:
playerplays

Expected Output:
Longest substring is not present in the given StringBuilder
Instructions
Avoid printing unnecessary values other than expected output as given in sample
Take care of whitespace/trailing whitespace
Do not change the provided class/method names unless instructed
Follow best practices while coding


























